import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from aiohttp import web

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∏ —è –≤—Å—ë –æ—Ñ–æ—Ä–º–ª—é.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if not text:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": text}]
    )
    await update.message.reply_text(response['choices'][0]['message']['content'])

# üîÅ Webhook endpoint
async def webhook_view(request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

# ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(BOT_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

async def main():
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è webhook
    await application.initialize()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    await application.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    app.router.add_post("/", webhook_view)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ webhook!")

    await application.start()
    await application.updater.start_polling()  # –ú–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å, –µ—Å–ª–∏ —á–∏—Å—Ç–æ webhook

    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await application.updater.wait()
    await application.stop()
    await application.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
